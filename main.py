import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from ttkthemes import ThemedTk
from database import NotesDB
import os
from PIL import Image, ImageTk

class NotesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("SkimNote - –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–º–µ—Ç–æ–∫")
        self.root.geometry("1000x600")
        
        self.db = NotesDB()
        self.current_note_id = None
        self.current_parent_id = 1
        self.content_modified = False
        self.editing_title = False

        self.create_menu()
        self.create_toolbar()
        self.setup_ui()
        self.load_notes()

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def create_menu(self):
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.menubar = tk.Menu(self.root)
        self.root.config(menu=self.menubar)

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", command=self.new_note)
        file_menu.add_command(label="–ù–æ–≤–∞—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞", command=self.new_subnote)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.on_closing)

        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = tk.Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)

    def create_toolbar(self):
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar = ttk.Frame(self.root)
        self.toolbar.pack(fill=tk.X, padx=5, pady=2)

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        style = ttk.Style()
        style.configure('Toolbar.TButton', font=('TkDefaultFont', 12))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
        ttk.Button(self.toolbar, text="üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", style='Toolbar.TButton',
                  command=self.new_note).pack(side=tk.LEFT, padx=2)
        ttk.Button(self.toolbar, text="üìë –ù–æ–≤–∞—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è", style='Toolbar.TButton',
                  command=self.new_subnote).pack(side=tk.LEFT, padx=2)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(self.toolbar, orient='vertical').pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=2)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        ttk.Button(self.toolbar, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", style='Toolbar.TButton',
                  command=self.delete_note).pack(side=tk.LEFT, padx=2)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥ –ø–∞–Ω–µ–ª—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        ttk.Separator(self.toolbar, orient='horizontal').pack(fill=tk.X, pady=2)

    def show_about(self):
        messagebox.showinfo(
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "SkimNote - –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–º–µ—Ç–æ–∫\n\n"
            "–í–µ—Ä—Å–∏—è: 1.0\n"
            "–ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–º–µ—Ç–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
            "–≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.\n\n"
            "¬© 2024 SkimNote"
        )

    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        main_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ä–µ–≤–æ–º –∑–∞–º–µ—Ç–æ–∫
        left_frame = ttk.Frame(main_container)
        main_container.add(left_frame, weight=1)

        # –î–µ—Ä–µ–≤–æ –∑–∞–º–µ—Ç–æ–∫
        self.notes_tree = ttk.Treeview(left_frame, selectmode='browse')
        self.notes_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.notes_tree.heading('#0', text='–ó–∞–º–µ—Ç–∫–∏', anchor=tk.W)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Ä–µ–≤–∞
        self.notes_tree.bind('<<TreeviewSelect>>', self.on_note_select)
        self.notes_tree.bind('<Double-1>', self.start_rename)
        self.notes_tree.bind('<Return>', self.start_rename)
        self.notes_tree.bind('<Escape>', self.cancel_rename)
        self.notes_tree.bind('<F2>', self.start_rename)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.title_editor = ttk.Entry(self.notes_tree)
        self.title_editor.bind('<Return>', self.finish_rename)
        self.title_editor.bind('<Escape>', self.cancel_rename)
        self.title_editor.bind('<FocusOut>', self.finish_rename)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", command=self.new_note)
        self.context_menu.add_command(label="üìë –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—É—é", command=self.new_subnote)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=self.start_rename)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_note)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–µ –º—ã—à–∏
        self.notes_tree.bind('<Button-3>', self.show_context_menu)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
        right_frame = ttk.Frame(main_container)
        main_container.add(right_frame, weight=3)

        # –ü–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        self.note_content = tk.Text(right_frame, wrap=tk.WORD)
        self.note_content.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
        self.note_content.bind('<<Modified>>', self.on_content_modified)

    def load_notes(self, parent=''):
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        if not parent:
            for item in self.notes_tree.get_children():
                self.notes_tree.delete(item)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ë–î
            notes = self.db.get_notes(None)
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            self.notes_dict = {note[0]: note for note in notes}
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
            for note in notes:
                note_id, title, content, parent_id, created_at, updated_at = note
                if parent_id is None or parent_id == 1:
                    self.notes_tree.insert('', tk.END, str(note_id), text=title)
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            for note in notes:
                note_id, title, content, parent_id, created_at, updated_at = note
                if parent_id and parent_id != 1:
                    self.notes_tree.insert(str(parent_id), tk.END, str(note_id), text=title)

    def new_note(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É"""
        try:
            note_id = self.db.create_note("–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", "", self.current_parent_id)
            self.load_notes()
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
            self.notes_tree.selection_set(str(note_id))
            self.notes_tree.see(str(note_id))
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            self.start_rename()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")

    def new_subnote(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É"""
        if not self.notes_tree.selection():
            return
            
        parent_id = int(self.notes_tree.selection()[0])
        try:
            note_id = self.db.create_note("–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", "", parent_id)
            self.load_notes()
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
            self.notes_tree.selection_set(str(note_id))
            self.notes_tree.see(str(note_id))
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            self.start_rename()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")

    def save_current_note(self):
        if self.current_note_id and self.content_modified:
            content = self.note_content.get('1.0', tk.END).strip()
            try:
                note = self.db.get_note(self.current_note_id)
                if note:
                    self.db.update_note(self.current_note_id, note[1], content)
                    self.content_modified = False
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")

    def delete_note(self):
        if not self.notes_tree.selection():
            return
            
        note_id = int(self.notes_tree.selection()[0])
        
        # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –∑–∞–º–µ—Ç–∫—É
        if note_id == 1:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –∑–∞–º–µ—Ç–∫—É")
            return
            
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–º–µ—Ç–∫—É?"):
            try:
                self.db.delete_note(note_id)
                self.load_notes()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")

    def on_note_select(self, event):
        if self.current_note_id:
            self.save_current_note()
            
        selected = self.notes_tree.selection()
        if selected:
            note_id = int(selected[0])
            note = self.db.get_note(note_id)
            if note:
                self.current_note_id = note_id
                self.current_parent_id = note[3] if note[3] else 1
                self.note_content.delete('1.0', tk.END)
                if note[2]:  # content
                    self.note_content.insert('1.0', note[2])
                self.content_modified = False
                self.note_content.edit_modified(False)

    def show_context_menu(self, event):
        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        item = self.notes_tree.identify_row(event.y)
        
        if item:
            # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–∑–≤–∞–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            self.notes_tree.selection_set(item)
            # –û–±–Ω–æ–≤–ª—è–µ–º current_note_id –∏ current_parent_id
            self.current_note_id = int(item)
            note = self.db.get_note(self.current_note_id)
            if note:
                self.current_parent_id = note[3] if note[3] else 1
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –Ω–∞ –∑–∞–º–µ—Ç–∫–µ, —Å–æ–∑–¥–∞–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
            self.current_note_id = None
            self.current_parent_id = 1
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if item:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—É–Ω–∫—Ç—ã
            self.context_menu.entryconfig("üìë –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—É—é", state="normal")
            self.context_menu.entryconfig("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", state="normal")
            self.context_menu.entryconfig("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", state="normal")
            if int(item) == 1:  # –ö–æ—Ä–Ω–µ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
                self.context_menu.entryconfig("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", state="disabled")
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–∞ –ø—É—Å—Ç–æ–º –º–µ—Å—Ç–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
            self.context_menu.entryconfig("üìë –î–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—É—é", state="disabled")
            self.context_menu.entryconfig("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", state="disabled")
            self.context_menu.entryconfig("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", state="disabled")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu.tk_popup(event.x_root, event.y_root)

    def on_content_modified(self, event=None):
        if self.note_content.edit_modified():
            self.content_modified = True
            self.note_content.edit_modified(False)

    def on_closing(self):
        self.save_current_note()
        self.root.destroy()

    def start_rename(self, event=None):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        if not self.notes_tree.selection():
            return
            
        item_id = self.notes_tree.selection()[0]
        
        # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –∑–∞–º–µ—Ç–∫—É
        if int(item_id) == 1:
            return
            
        if not self.editing_title:
            self.editing_title = True
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            bbox = self.notes_tree.bbox(item_id)
            if not bbox:
                return
                
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.title_editor.delete(0, tk.END)
            self.title_editor.insert(0, self.notes_tree.item(item_id)['text'])
            
            # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–≤–µ—Ä—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞
            self.title_editor.place(x=bbox[0], y=bbox[1],
                                  width=bbox[2], height=bbox[3])
            self.title_editor.focus_set()
            self.title_editor.selection_range(0, tk.END)

    def finish_rename(self, event=None):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        if not self.editing_title:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        new_title = self.title_editor.get().strip()
        item_id = self.notes_tree.selection()[0]
        
        if new_title:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            try:
                note = self.db.get_note(int(item_id))
                if note:
                    self.db.update_note(int(item_id), new_title, note[2])
                    self.notes_tree.item(item_id, text=new_title)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")
        
        self.title_editor.place_forget()
        self.editing_title = False
        self.notes_tree.focus_set()

    def cancel_rename(self, event=None):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
        if self.editing_title:
            self.title_editor.place_forget()
            self.editing_title = False
            self.notes_tree.focus_set()

if __name__ == "__main__":
    root = ThemedTk(theme="arc")
    app = NotesApp(root)
    root.mainloop() 